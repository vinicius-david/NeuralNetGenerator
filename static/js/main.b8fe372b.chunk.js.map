{"version":3,"sources":["assets/background.png","classes/MatrixOperations.ts","classes/NeuralNet.ts","components/Input/styles.ts","components/Input/index.tsx","components/Button/styles.ts","components/Button/index.tsx","components/Toast/styles.ts","components/Toast/index.tsx","global/globalStyles.ts","styles.ts","App.tsx","index.tsx"],"names":["module","exports","MatrixOperations","rows","columns","this","data","i","array","j","push","Math","random","newMatrix","execute","length","map","item","newArray","multiplyer","_","colIndex","row","dataA","dataB","k","sigmoid","exp","derivateSigmoid","NeuralNetwork","inputNodes","hiddenNodes","outputNodes","learningRate","operator","biasInputHidden","biasHiddenOutput","inputWeigths","hiddenWeigths","inputArray","inputMatrix","arrayToMatrix","firstMultiply","matrixMultiply","hiddenLayer","sum","seccondMultiply","output","matrixToArray","input","expected","expectedMatrix","absoluteError","subtract","outputDerivate","transposedHiddenLayer","transpose","hiddenGradient","hadamard","numberMultiply","deltaHiddenWeigths","transposedHiddenWeigths","hiddenError","hiddenDerivate","transposedInputLayer","inputGradient","deltaInputWeigths","StyledInput","styled","Input","name","type","rest","ButtonColorVariations","info","css","delete","run","Container","button","props","classType","Button","children","ContainerColorVariations","positive","negative","div","ToastText","h3","Toast","message","createGlobalStyle","Header","header","FormContainer","Form","form","ResultsTable","Background","backgroundImg","App","useState","toastMessage","setToastMessage","formData","setFormData","trainChange","setTrainChange","inputs","outputs","trainingData","setTrainingData","trainedNet","setTrainedNet","runData","setRunData","results","setResults","handleInputChange","event","target","value","Number","handleTrainChange","splittedValuesAsNumbers","split","a","preventDefault","schema","Yup","shape","required","validate","abortEarly","inputsArray","outputsArray","alert","numberOfInputs","numberOfNeurons","numberOfOutputs","iterations","max","neuralNet","index","floor","train","setTimeout","size","color","onSubmit","onChange","onClick","console","log","key","uuid","id","result","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b8fe372b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/background.27d85f5b.png\";","interface MatrixOperations {\n  rows: number;\n  columns: number;\n  data: number[][];\n}\n\nclass MatrixOperations {\n  public execute(rows: number, columns: number) {\n    this.rows = rows;\n    this.columns = columns;\n\n    this.data = [];\n\n    for (let i = 0; i < this.rows; i++) {\n      const array = [];\n      for (let j = 0; j < this.columns; j++) {\n        array.push((Math.random() * 2) - 1);\n      }\n      this.data.push(array);\n    }\n\n    return this;\n  }\n\n  static arrayToMatrix(array: number[]) {\n    const operator = new MatrixOperations();\n    const newMatrix = operator.execute(array.length, 1);\n\n    array.map((item, i) => newMatrix.data[i] = [item]);\n\n    return newMatrix.data;\n  }\n\n  static matrixToArray(data: number[][]) {\n    const newArray: number[] = [];\n\n    data.map(array => newArray.push(array[0]))\n\n    return newArray;\n  }\n\n  static numberMultiply(data: number[][], multiplyer: number) {\n    const newData = data.map(array => (array.map(item => item * multiplyer)))\n\n    return newData;\n  }\n\n  static transpose(data: number[][]) {\n    const newData = data[0].map((_, colIndex) => data.map(row => row[colIndex]));\n\n    return newData;\n  }\n\n  static sum(dataA: number[][], dataB: number[][]) {\n    const operator = new MatrixOperations();\n    const newMatrix = operator.execute(dataA.length, dataB[0].length);\n\n    for (let i = 0; i < newMatrix.rows; i++) {\n      for (let j = 0; j < newMatrix.columns; j++) {\n        newMatrix.data[i][j] = dataA[i][j] + dataB[i][j];\n      }\n    }\n\n    return newMatrix.data;\n  }\n\n  static subtract(dataA: number[][], dataB: number[][]) {\n    const operator = new MatrixOperations();\n    const newMatrix = operator.execute(dataA.length, dataA[0].length);\n\n    for (let i = 0; i < newMatrix.rows; i++) {\n      for (let j = 0; j < newMatrix.columns; j++) {\n        newMatrix.data[i][j] = dataA[i][j] - dataB[i][j];\n      }\n    }\n\n    return newMatrix.data;\n  }\n\n  static hadamard(dataA: number[][], dataB: number[][]) {\n    const operator = new MatrixOperations();\n    const newMatrix = operator.execute(dataA.length, dataA[0].length);\n\n    for (let i = 0; i < newMatrix.rows; i++) {\n      for (let j = 0; j < newMatrix.columns; j++) {\n        newMatrix.data[i][j] = dataA[i][j] * dataB[i][j];\n      }\n    }\n\n    return newMatrix.data;\n  }\n\n  static matrixMultiply(dataA: number[][], dataB: number[][]) {\n    const operator = new MatrixOperations();\n    const newMatrix = operator.execute(dataA.length, dataB[0].length);\n\n    for (let i = 0; i < dataA.length; i++) {\n      for (let j = 0; j < dataB[0].length; j++) {\n\n        newMatrix.data[i][j] = 0;\n\n        for (let k = 0; k < dataA[0].length; k++) {\n\n          newMatrix.data[i][j] += dataA[i][k] * dataB[k][j];\n      }\n    }\n  }\n\n    return newMatrix.data;\n  }\n}\n\nexport default MatrixOperations;\n","import MatrixOperations from './MatrixOperations';\n\ninterface NeuralNetwork {\n  inputNodes: number;\n  hiddenNodes: number;\n  outputNodes: number;\n  learningRate: number;\n  biasInputHidden: number[][];\n  biasHiddenOutput: number[][];\n  inputWeigths: number[][];\n  hiddenWeigths: number[][];\n}\n\nfunction sigmoid(data: number[][]) {\n  const operator = new MatrixOperations();\n  const newMatrix = operator.execute(data.length, 1);\n\n  for (let i = 0; i < data.length; i++) {\n    newMatrix.data[i] = [( 1 / ( 1 + Math.exp(-data[i][0])))];\n  }\n\n  return newMatrix.data;\n}\n\nfunction derivateSigmoid(data: number[][]) {\n  const operator = new MatrixOperations();\n  const newMatrix = operator.execute(data.length, 1);\n\n  for (let i = 0; i < data.length; i++) {\n    newMatrix.data[i] = [( data[i][0] * (1 - data[i][0]))];\n  }\n\n  return newMatrix.data;\n}\n\nclass NeuralNetwork {\n  constructor(inputNodes: number, hiddenNodes: number, outputNodes: number) {\n    this.inputNodes = inputNodes;\n    this.hiddenNodes = hiddenNodes;\n    this.outputNodes = outputNodes;\n    this.learningRate = 0.1;\n\n    const operator = new MatrixOperations();\n\n    this.biasInputHidden = (operator.execute(this.hiddenNodes, 1)).data;\n    this.biasHiddenOutput = (operator.execute(this.outputNodes, 1)).data;\n\n    this.inputWeigths = (operator.execute(this.hiddenNodes, this.inputNodes)).data;\n    this.hiddenWeigths = (operator.execute(this.outputNodes, this.hiddenNodes)).data;\n  }\n\n  run(inputArray: number[]) {\n    // input to hidden layer\n    const inputMatrix = MatrixOperations.arrayToMatrix(inputArray);\n\n    const firstMultiply = MatrixOperations.matrixMultiply(this.inputWeigths, inputMatrix);\n    const hiddenLayer = sigmoid(MatrixOperations.sum(firstMultiply, this.biasInputHidden));\n\n    // hidden to output\n    const seccondMultiply = MatrixOperations.matrixMultiply(this.hiddenWeigths, hiddenLayer);\n    const output = sigmoid(MatrixOperations.sum(seccondMultiply, this.biasHiddenOutput));\n\n    const outputArray = MatrixOperations.matrixToArray(output);\n\n    return outputArray;\n  }\n\n  train(input: number[], expected: number[]) {\n    // feedforward\n    // input to hidden layer\n    const inputMatrix = MatrixOperations.arrayToMatrix(input);\n\n    const firstMultiply = MatrixOperations.matrixMultiply(this.inputWeigths, inputMatrix);\n    const hiddenLayer = sigmoid(MatrixOperations.sum(firstMultiply, this.biasInputHidden));\n\n    // hidden to output\n    const seccondMultiply = MatrixOperations.matrixMultiply(this.hiddenWeigths, hiddenLayer);\n    const output = sigmoid(MatrixOperations.sum(seccondMultiply, this.biasHiddenOutput));\n\n    // backpropagation\n    // output to hidden\n    const expectedMatrix = MatrixOperations.arrayToMatrix(expected);\n    const absoluteError = MatrixOperations.subtract(expectedMatrix, output);\n    const outputDerivate = derivateSigmoid(output);\n    const transposedHiddenLayer = MatrixOperations.transpose(hiddenLayer);\n\n    let hiddenGradient = MatrixOperations.hadamard(absoluteError, outputDerivate);\n    hiddenGradient = MatrixOperations.numberMultiply(hiddenGradient, this.learningRate);\n\n    // adjust bias\n    this.biasHiddenOutput = MatrixOperations.sum(this.biasHiddenOutput, hiddenGradient);\n\n    // adjust weigths\n    const deltaHiddenWeigths = MatrixOperations.matrixMultiply(hiddenGradient, transposedHiddenLayer);\n    this.hiddenWeigths = MatrixOperations.sum(this.hiddenWeigths, deltaHiddenWeigths);\n\n    // hidden to input\n    const transposedHiddenWeigths = MatrixOperations.transpose(this.hiddenWeigths);\n    const hiddenError = MatrixOperations.matrixMultiply(transposedHiddenWeigths, absoluteError);\n    const hiddenDerivate = derivateSigmoid(hiddenLayer);\n    const transposedInputLayer = MatrixOperations.transpose(inputMatrix);\n\n    let inputGradient = MatrixOperations.hadamard(hiddenError, hiddenDerivate);\n    inputGradient = MatrixOperations.numberMultiply(inputGradient, this.learningRate);\n\n    // adjust bias\n    this.biasInputHidden = MatrixOperations.sum(this.biasInputHidden, inputGradient);\n\n    // adjust weigths\n    const deltaInputWeigths = MatrixOperations.matrixMultiply(inputGradient, transposedInputLayer);\n    this.inputWeigths = MatrixOperations.sum(this.inputWeigths, deltaInputWeigths);\n  }\n}\n\nexport default NeuralNetwork;\n","import styled from 'styled-components';\n\nexport const StyledInput = styled.input`\n  background-color: #ddd;\n\n  border: 2px solid #ddd;\n  border-radius: 4px;\n  padding: 8px 16px;\n\n  &:focus {\n    border-color: #111;\n  }\n`;\n","import React, { InputHTMLAttributes } from 'react';\n\nimport { StyledInput } from './styles';\n\ninterface InputProps extends InputHTMLAttributes<HTMLInputElement> {\n  name: string;\n  type: string;\n}\n\nconst Input: React.FC<InputProps> = ({ name, type, ...rest }) => (\n  <>\n    <StyledInput type={type} name={name} {...rest} />\n  </>\n);\n\nexport default Input;\n","import styled, { css } from 'styled-components';\n\ninterface ButtonProps {\n  classType: 'info' | 'delete' | 'run';\n}\n\nconst ButtonColorVariations = {\n  info: css`\n    background-color: #222266;\n  `,\n  delete: css`\n    background-color: #662222;\n  `,\n  run: css`\n    background-color: #226622;\n  `,\n}\n\nexport const Container = styled.button<ButtonProps>`\n  width: 100%;\n\n  padding: 8px 16px;\n  margin-top: 16px;\n  border-radius: 4px;\n\n  ${props => ButtonColorVariations[props.classType]}\n\n  color: #ddd;\n\n  &:hover {\n    transition: 400ms;\n    opacity: 0.9;\n  }\n`;\n","import React, { ButtonHTMLAttributes } from 'react';\n\nimport { Container } from './styles';\n\ninterface ButtonProps extends ButtonHTMLAttributes<HTMLButtonElement> {\n  classType: 'info' | 'delete' | 'run';\n}\n\nconst Button: React.FC<ButtonProps> = ({ children, ...rest }) => (\n  <Container {...rest} >{children}</Container>\n);\n\nexport default Button;\n","import styled, { css } from 'styled-components';\n\ninterface ContainerProps {\n  type: 'positive' | 'negative';\n}\n\nconst ContainerColorVariations = {\n  positive: css`\n    background-color: #226622;\n  `,\n  negative: css`\n    background-color: #662222;\n  `,\n}\n\nexport const Container = styled.div<ContainerProps>`\n  width: 260px;\n  height: 80px;\n\n  margin-top: 16px;\n  margin-right: 16px;\n\n  ${props => ContainerColorVariations[props.type]}\n\n  position: absolute;\n  top: 0;\n  right: 0;\n\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n\nexport const ToastText = styled.h3`\n  color: #eee;\n  font-size: 16px;\n`;\n","import React from 'react';\n\nimport { Container, ToastText } from './styles';\n\ninterface ToastProps {\n  message: string;\n  type: 'positive' | 'negative';\n}\n\nconst Toast: React.FC<ToastProps> = ({ message, type }) => (\n  <Container type={type} >\n    <ToastText>{message}</ToastText>\n  </Container>\n);\n\nexport default Toast;\n","import { createGlobalStyle } from 'styled-components';\n\nexport default createGlobalStyle`\n  * {\n    margin: 0;\n    padding: 0;\n    outline: 0;\n    box-sizing: border-box;\n  };\n  body {\n    background: #fff;\n    color: #111;\n    -webkit-font-smoothing: antialiased;\n  };\n  body, input, button {\n    font-family: 'Ubuntu', serif;\n    font-size: 16px;\n  };\n  button {\n    cursor: pointer;\n    box-shadow: 0px 0px 0px;\n    border: 0;\n  };\n  h1, h2, h3, h4, h5, h6, strong {\n    font-weight: 500;\n  };\n`;\n","import styled from 'styled-components';\n\nimport backgroundImg from './assets/background.png';\n\nexport const Header = styled.header`\n  background-color: #000;\n\n  padding: 24px 0;\n\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: left;\n\n  svg {\n    margin-right: 8px;\n    margin-left: 15vw;\n  }\n\n  h1 {\n    color: #eee;\n  }\n`;\n\nexport const Container = styled.div`\n  width: 70vw;\n  margin: 0 auto;\n\n  padding-top: 32px;\n\n  display: flex;\n  flex-direction: row;\n  align-items: top;\n  justify-content: space-between;\n`;\n\nexport const FormContainer = styled.div`\n  padding: 16px 32px 24px;\n  background-color: #fff;\n  border-radius: 4px;\n`;\n\nexport const Form = styled.form`\n  display: flex;\n  flex-direction: column;\n  justify-content: left;\n\n  h2 {\n    margin-top: 24px;\n    margin-bottom: 8px;\n  }\n\n  h3 {\n    margin-top: 16px;\n    margin-bottom: 8px;\n  }\n`;\n\nexport const ResultsTable = styled.div`\n  margin-top: 24px;\n\n  h3 {\n    margin-top: 16px;\n  }\n`;\n\nexport const Background = styled.div`\n  width: 100%;\n  height: 100%;\n\n  position: absolute;\n  top: 0;\n  left: 0;\n  z-index: -1;\n\n  background: url(${backgroundImg}) no-repeat center;\n  background-size: cover;\n`;\n","import React, { useState, ChangeEvent, FormEvent } from 'react';\nimport { FiCpu } from 'react-icons/fi';\nimport * as Yup from 'yup';\nimport { uuid } from 'uuidv4';\n\nimport NeuralNetwork from './classes/NeuralNet';\n\nimport Input from './components/Input';\nimport Button from './components/Button';\nimport Toast from './components/Toast';\n\nimport GlobalStyle from './global/globalStyles';\nimport { Header, Container, FormContainer, Form, ResultsTable, Background } from './styles';\n\ninterface ToastMessageProps {\n  message: string;\n  type: 'positive' | 'negative';\n}\n\ninterface FormDataProps {\n  numberOfInputs: number;\n  numberOfNeurons: number;\n  numberOfOutputs: number;\n  iterations: number;\n}\n\ninterface TrainingDataProps {\n  inputs: number[][];\n  outputs: number[][];\n}\n\ninterface TrainChangeProps {\n  input: number[];\n  output: number[];\n}\n\ninterface RunningDataProps {\n  input: number[];\n}\n\nconst App = () => {\n  const [toastMessage, setToastMessage] = useState<ToastMessageProps>({} as ToastMessageProps);\n\n  const [formData, setFormData] = useState<FormDataProps>({} as FormDataProps);\n  const [trainChange, setTrainChange] = useState<TrainChangeProps>({} as TrainChangeProps);\n  const [trainingData, setTrainingData] = useState<TrainingDataProps>({\n    inputs: [],\n    outputs: [],\n  });\n  const [trainedNet, setTrainedNet] = useState<NeuralNetwork>();\n\n  const [runData, setRunData] = useState<RunningDataProps>({} as RunningDataProps);\n  const [results, setResults] = useState<number[][]>([]);\n\n\n  function handleInputChange(event: ChangeEvent<HTMLInputElement>) {\n    const { name, value } = event.target;\n\n    setFormData({ ...formData, [name]: Number(value) })\n  }\n\n  function handleTrainChange(event: ChangeEvent<HTMLInputElement>) {\n    const { name, value } = event.target;\n    const splittedValues = value.split(',')\n    const splittedValuesAsNumbers = splittedValues.map(item => Number(item));\n\n    setTrainChange({ ...trainChange, [name]: splittedValuesAsNumbers })\n  }\n\n  async function handlePushTrainingData(event: FormEvent) {\n    try {\n      event.preventDefault();\n\n      const schema = Yup.object().shape({\n        input: Yup.number().required('Required'),\n        output: Yup.number().required('Required'),\n      });\n\n      await schema.validate(trainChange,{\n        abortEarly: false,\n      });\n\n      const { input, output } = trainChange;\n\n      const inputsArray = trainingData.inputs\n      inputsArray.push(input);\n      const outputsArray = trainingData.outputs\n      outputsArray.push(output);\n\n      setTrainingData({ inputs: inputsArray, outputs: outputsArray });\n    } catch {\n      alert('Erro')\n    }\n  }\n\n  function clearTainData() {\n    console.log(trainingData);\n    setTrainingData({\n      inputs: [],\n      outputs: [],\n    });\n    console.log(trainingData);\n\n  }\n\n  async function handleTrain(event: FormEvent) {\n    try {\n      event.preventDefault();\n\n      const schema = Yup.object().shape({\n        numberOfInputs: Yup.number().required('Required'),\n        numberOfNeurons: Yup.number().required('Required'),\n        numberOfOutputs: Yup.number().required('Required'),\n        iterations: Yup.number().required('Max 20000 iterations').max(20000),\n      });\n\n      await schema.validate(formData);\n\n      const {\n        numberOfInputs,\n        numberOfNeurons,\n        numberOfOutputs,\n        iterations,\n      } = formData;\n\n      const neuralNet = new NeuralNetwork(numberOfInputs, numberOfNeurons, numberOfOutputs);\n\n      for (let i = 0; i < iterations; i++) {\n        let index = Math.floor(Math.random() * 4);\n        neuralNet.train(trainingData.inputs[index], trainingData.outputs[index])\n      }\n\n      setToastMessage({ type: 'positive', message: 'Trained!' })\n      setTimeout(() => {setToastMessage({ type: 'positive', message: '' })}, 4000);\n\n      setTrainedNet(neuralNet);\n    } catch {\n      alert('Erro')\n    }\n  }\n\n  function handleRunChange(event: ChangeEvent<HTMLInputElement>) {\n    const { name, value } = event.target;\n\n    const splittedValues = value.split(',')\n    const splittedValuesAsNumbers = splittedValues.map(item => Number(item));\n\n    setRunData({ ...runData, [name]: splittedValuesAsNumbers });\n  }\n\n  function handleRun(event: FormEvent) {\n    event.preventDefault();\n\n    if (!trainedNet) {\n      setToastMessage({ type: 'negative', message: 'Train the net first!' })\n      return setTimeout(() => {setToastMessage({ type: 'negative', message: '' })}, 4000);\n    };\n\n    const results = [\n      trainedNet.run(runData.input),\n    ]\n    setResults(results);\n  }\n\n  return (\n    <>\n      <Header>\n        <FiCpu size={30} color='#eee' />\n        <h1>Neural Network Generator</h1>\n      </Header>\n\n      <Container>\n\n        <FormContainer>\n          <Form onSubmit={handlePushTrainingData} >\n            <h2>Training Data</h2>\n\n            <h3>Inputs</h3>\n            <Input name=\"input\" onChange={handleTrainChange} type=\"text\"/>\n\n            <h3>Outputs</h3>\n            <Input name=\"output\" onChange={handleTrainChange} type=\"text\"/>\n\n            <Button type='submit' classType='info' >Push</Button>\n            <Button type='button' onClick={clearTainData} classType='delete' >Clear</Button>\n          </Form>\n\n          <div>\n            <h4>Inputs</h4>\n              {trainingData.inputs.map(item => (\n                <p key={uuid()}>{item}</p>\n              ))}\n            <h4>Outputs</h4>\n              {trainingData.outputs.map(item => (\n                <p key={uuid()}>{item}</p>\n              ))}\n          </div>\n        </FormContainer>\n\n        <FormContainer>\n          <Form onSubmit={handleTrain}>\n            <div id='basic-info'>\n              <h2>Paramters</h2>\n\n              <h3>Number de inputs</h3>\n              <Input name='numberOfInputs' onChange={handleInputChange} type=\"number\"/>\n\n              <h3>Hidden Layer Neurons</h3>\n              <Input name='numberOfNeurons' onChange={handleInputChange} type=\"number\"/>\n\n              <h3>Number de outputs</h3>\n              <Input name='numberOfOutputs' onChange={handleInputChange} type=\"number\"/>\n\n              <h3>Iterações</h3>\n              <Input name='iterations' onChange={handleInputChange} type=\"number\"/>\n            </div>\n\n            <Button type=\"submit\" classType='info' >Train</Button>\n          </Form>\n        </FormContainer>\n\n        <FormContainer>\n          <Form onSubmit={handleRun} >\n            <h2>Running Data</h2>\n\n            <h3>Inputs</h3>\n            <Input name=\"input\" onChange={handleRunChange} type=\"text\"/>\n\n            <Button type='submit' classType='run' >Run</Button>\n          </Form>\n\n          <ResultsTable>\n            <h2>Resultados:</h2>\n            {results.map(result => (\n              <h3 key={uuid()} >{result}</h3>\n            ))}\n          </ResultsTable>\n        </FormContainer>\n\n      </Container>\n\n      {toastMessage.message && (\n        < Toast message={toastMessage.message} type={toastMessage.type} />\n      )}\n\n      < Background />\n      < GlobalStyle />\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}